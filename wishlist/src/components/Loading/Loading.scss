* {
  border: 0;
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

.loading__wrapper {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: var(--bg);
  color: var(--fg);
  display: flex;
  font: 1em/1.5 sans-serif;
  height: 100vh;
  transition: background-color var(--trans-dur), color var(--trans-dur);
}

$debug: false;
$chips: 12;
$chip1Hue: var(--hue);
$chip2Hue: 43;

.pl {
  margin: auto;
  perspective: 8em;
  position: relative;
  width: 11em;
  height: 2em;

  &,
  &__chip {
    @if $debug == true {
      outline: 1px solid;
    }
    transform-style: preserve-3d;
  }
  &__chip {
    position: absolute;
    top: 0;
    right: 0;
    width: 2em;
    height: 2em;
    transform: translateX(50%) rotateY(90deg);

    &,
    &:before {
      animation: 2s move-left var(--trans-timing) infinite;
    }
    &:before {
      background-color: hsl($chip1Hue, 90%, 50%);
      border-radius: 50%;
      content: '';
      display: block;
      opacity: 0.8;
      width: 100%;
      height: 100%;
      transform: rotateZ(45deg);
    }
    &:nth-child(3n + 2):before {
      background-color: hsl($chip2Hue, 90%, 50%);
    }
    @for $c from 1 through $chips {
      &:nth-child(#{$c}) {
        right: 1em * ($c - 1);

        &:before {
          animation-name: roll-right-#{$c};
        }
      }
    }
  }
}
/* Dark theme */
@media (prefers-color-scheme: dark) {
  :root {
    --bg: hsl(var(--hue), 90%, 10%);
    --fg: hsl(var(--hue), 90%, 90%);
  }
}
/* Animations */
@keyframes move-left {
  from {
    transform: translateX(50%) rotateY(90deg);
  }
  to {
    transform: translateX(-100%) rotateY(90deg);
  }
}
@for $c from 1 through $chips {
  $rotateZAdjust: 135 * (($c - 1) / $chips);
  $transStart: translateZ(0) rotateZ(45deg + $rotateZAdjust) rotateX(0);
  // chip flips the wrong way if 180deg exactly, even as negative
  $transEnd: translateZ(3em)
    rotateZ(-45deg + $rotateZAdjust)
    rotateX(179.999deg);

  @keyframes roll-right-#{$c} {
    @if $c == 1 {
      from {
        transform: $transStart;
      }
    } @else {
      from,
      #{(50% / $chips) * ($c - 1)} {
        transform: $transStart;
      }
    }
    #{50%+(50 / $chips) * ($c - 1)},
    to {
      transform: $transEnd;
    }
  }
}
